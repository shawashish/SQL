CREATE Table if not exists city(
id int not NULL,
name VARCHAR(17),
countrycode VARCHAR(3),
district VARCHAR(20),
population int DEFAULT 0,
constraint pk PRIMARY KEY(id)
);

select * from city;

drop TABLE city;

insert into city (id,name,countrycode,district,population) VALUES
(6,'Rotterdam','NLD','Zuid-Holland',null),
(19,'Zaanstad','NLD','Noord-Holland',135621),
(214,'Porto Alegre','BRA','Rio Grande do Sul',1314032),
(397,'Lauro de Freitas','BRA','Bahia',109236),
(547,'Dobric','BGR','Varna',100399),
(552,'Bujumbura','BDI','Bujumbura',300000);

INSERT INTO city VALUES
(553,'Bujumbura','USA','New York',300000);

INSERT INTO city VALUES
(1661,'Kolkata','IND','New Town',300000);


INSERT INTO city VALUES
(1662,'Beijing','JPN','Holland',300000);

select * from city where countrycode = 'USA' and population > 100000;

select name from city where countrycode = 'USA' and population > 120000;

select * from city;

select * from city where id = 1661;

select * from city where countrycode = 'JPN';

SELECT name from city where countrycode = 'JPN';

CREATE Table if not exists station(
id int not NULL,
city VARCHAR(21),
state VARCHAR(2),
lat_n int,
long_w int,
constraint pk PRIMARY KEY(id)
);

INSERT INTO station VALUES
(1662,'Kolkata','WB',98,105);


INSERT INTO station VALUES
(1661,'Jaipur','RJ',97,111);

INSERT INTO station VALUES
(1663,'Jaipur','RG',99,112);


INSERT INTO station VALUES
(988,'Mullan','ID',143,154),
(987,'Hartland','MI',136,107),
(985,'Winslow','AR',126,126),
(983,'Patriot','IN',82,46),
(986,'Holbrook','AZ',134,103),
(999,'Hol','HO',133,102),
(911,'Win','WI',165,111);;;

SELECT * from station;

SELECT city,state from station;

select distinct(city) from station where mod(id,2) = 0;

select count(*) - count(DISTINCT(city)) as Net_Count from station;

select city, LENGTH(city) as length from station ORDER BY length(city) asc, city asc limit 1;
select city, LENGTH(city) as length from station ORDER BY LENGTH(city) desc,city asc limit 1;


SELECT distinct(city) from station where left(city,1) in ('A','E','I','O','U');

SELECT distinct(city) from station where substr(city,1,1) in ('A','E','I','O','U');

SELECT distinct(city) from station where right(city,1) in ('A','E','I','O','U');

SELECT distinct(city) from station where substr(city,-1,1) in ('A','E','I','O','U');

SELECT distinct(city) from station where left(city,1) not in ('A','E','I','O','U');

SELECT distinct(city) from station where right(city,1) not in ('A','E','I','O','U');


SELECT distinct(city) from station where left(city,1) not in ('A','E','I','O','U')
or RIGHT(city,1) not in ('A','E','I','O','U');

SELECT distinct(city) from station where left(city,1) not in ('A','E','I','O','U')
and RIGHT(city,1) not in ('A','E','I','O','U');


CREATE Table if not exists Product(
product_id int not NULL,
product_name VARCHAR(20),
unit_price int,
constraint pk PRIMARY KEY(product_id)
);

CREATE Table if not exists Sales(
seller_id int not NULL,
product_id int,
buyer_id int,
sale_date DATE,
quantity int,
price int,
constraint fk Foreign Key (product_id) REFERENCES Product(product_id)
);

insert into Product VALUES
(1,'S8',1000),
(2,'G4',800),
(3,'iPhone',1400);

SELECT * FROM Product;

INSERT INTO Sales VALUES
(1, 1, 1, '2019-01-21', 2, 2000),
(1, 2, 2, '2019-02-17', 1, 800),
(2, 2, 3, '2019-06-02', 1, 800),
(3, 3, 4,'2019-05-13', 2, 2800);

SELECT * FROM Sales;

select product_id,product_name
from Product
where product_id not in(
select product_id from Sales
where sale_date < '2019-01-01' or sale_date > '2019-03-31');

CREATE Table if not exists Views(
article_id int not NULL,
author_id int,
viewer_id int,
view_date DATE
);

INSERT into Views values
(1, 3, 5, '2019-08-01'),
(1 ,3, 6, '2019-08-02'),
(2, 7, 7, '2019-08-01'),
(2, 7, 6, '2019-08-02'),
(4, 7, 1, '2019-07-22'),
(3, 4, 4, '2019-07-21'),
(3, 4, 4, '2019-07-21');

SELECT * FROM Views;

select distinct(author_id) as id
from Views
where author_id = viewer_id
order by author_id;

CREATE Table if not exists Delivery(
delivery_id int not NULL,
customer_id int,
order_date DATE,
customer_pref_delivery_date DATE,
constraint pk PRIMARY KEY(delivery_id)
);



INSERT into Delivery VALUES
(1, 1, '2019-08-01', '2019-08-02'),
(2, 5, '2019-08-02', '2019-08-02'),
(3, 1, '2019-08-11', '2019-08-11'),
(4, 3, '2019-08-24', '2019-08-26'),
(5, 4, '2019-08-21', '2019-08-22'),
(6, 2, '2019-08-11', '2019-08-13');

select * FROM Delivery;


with cte As
(select count(delivery_id) as immediate_orders from Delivery where order_date = customer_pref_delivery_date)
select round(100*(select immediate_orders from cte)/count(delivery_id),2) as immediate_percentage from Delivery;

CREATE Table if not exists Ads(
ad_id int not NULL,
user_id int,
action ENUM('Clicked','Viewed','Ignored'),
constraint pk PRIMARY KEY(ad_id,user_id)
);

insert into Ads VALUES
(1, 1, 'Clicked'),
(2, 2, 'Clicked'),
(3, 3, 'Viewed'),
(5, 5, 'Ignored'),
(1, 7, 'Ignored'),
(2, 7, 'Viewed'),
(3, 5, 'Clicked'),
(1, 4, 'Viewed'),
(2, 11, 'Viewed'),
(1, 2, '(Clicked');

select * FROM Ads;

select ad_id,
    ifnull(round(sum(action ='Clicked')/sum(action !='Ignored') *100,2),0) ctr
from Ads
group by ad_id
order by ctr desc, ad_id;

CREATE Table if not exists Employee(
employee_id int not NULL,
team_id int,
constraint pk PRIMARY KEY(employee_id)
);

INSERT INTO Employee VALUES
(1, 8),
(2, 8),
(3,8),
(4, 7),
(5, 9),
(6, 9);

SELECT * FROM Employee;

with cte as(
select team_id,count(team_id) as team_size
from Employee
GROUP BY team_id
order by team_id)
select e.employee_id,f.team_size
from Employee e
inner join cte f
on e.team_id = f.team_id
order by e.employee_id;

select employee_id,count(team_id)
over(PARTITION BY team_id)
from Employee
order by employee_id;


select ct.country_name,
case when avg(wt.weather_state) <= 15 then 'Cold'
    when avg(wt.weather_state) >=25 then 'Hot'
    else 'Warm'
    END as weather_type
from Weather wt
inner join Countries ct
on wt.country_id = ct.country_id
where wt.day BETWEEN '2019-11-01' and '2019-11-30'
group by ct.country_name;


select pr.product_id,
round(sum(us.units* pr.price)/SUM(us.units),2) as average_price
from Prices pr
left join UnitsSold us
on pr.product_id = us.product_id
where us.purchase_date BETWEEN pr.start_date and pr.end_date
group by pr.product_id;


CREATE Table if not exists Activity(
player_id int not NULL,
device_id int,
event_date date,
games_played int,
constraint pk PRIMARY KEY(player_id,event_date)
);

insert into Activity VALUES
(1, 2, '2016-03-01', 5),
(1, 2, '2016-05-02', 6),
(2, 3, '2017-06-25', 1),
(3, 1, '2016-03-02', 0),
(3, 4, '2018-07-03', 5);

with cte as(
select distinct(player_id),
event_date,
row_number() OVER(PARTITION BY player_id) as rn
from Activity)
select player_id,event_date from cte where rn = 1;

with cte as(
select player_id,device_id,
row_number() OVER(PARTITION BY player_id) as rn
from Activity)
select player_id,device_id from cte where rn = 1;

CREATE Table if not exists Products(
product_id int not NULL,
product_name VARCHAR(40),
product_category VARCHAR(20),
constraint pk1 PRIMARY KEY(product_id)
);

CREATE Table if not exists Orders(
product_id int not NULL,
order_date DATE,
unit int,
constraint fk1 Foreign Key (product_id) REFERENCES Products(product_id)
);

insert into Products VALUES
(1, 'Leetcode Solutions', 'Book'),
(2, 'Jewels of Stringology', 'Book'),
(3, 'HP', 'Laptop'),
(4, 'Lenovo', 'Laptop'),
(5, 'Leetcode Kit', 'T-shirt');

INSERT INTO Orders VALUES
(1, '2020-02-05' ,60),
(1, '2020-02-10' ,70),
(2, '2020-01-18' ,30),
(2, '2020-02-11' ,80),
(3, '2020-02-17' ,2),
(3, '2020-02-24' ,3),
(4, '2020-03-01' ,20),
(4, '2020-03-04' ,30),
(4, '2020-03-04' ,60),
(5, '2020-02-25' ,50),
(5, '2020-02-27' ,50),
(5, '2020-03-01' ,50);

select pt.product_name,SUM(od.unit) as total_units
from Products pt
inner JOIN Orders od
on pt.product_id = od.product_id
where left(od.order_date,7) = '2020-02'
group by pt.product_name
having SUM(od.unit) >=100;

CREATE Table if not exists Users(
user_id int not NULL,
name VARCHAR(20),
mail VARCHAR(20),
constraint pk3 PRIMARY KEY(user_id)
);

INSERT INTO Users VALUES
(1, 'Winston', 'winston@leetcode.com'),
(2, 'Jonathan', 'jonathanisgreat'),
(3, 'Annabelle', 'bella-@leetcode.com'),
(4, 'Sally' ,'sally.come@leetcode.com'),
(5, 'Marwan', 'quarz#2020@leetcode.com'),
(6, 'David' ,'david69@gmail.com'),
(7, 'Shapiro', '.shapo@leetcode.com');

alter Table Users MODIFY mail VARCHAR(255);

select * 
from Users
where mail regexp '^[A-Za-z][A-Za-z0-9\_\.\-]*@leetcode\.com$'



select o.customer_id, name
from
Orders o
join
Product p
on o.product_id = p.product_id
join
Customers c
on o.customer_id = c.customer_id
group by o.customer_id, c.name
having sum(case when left(order_date,7)='2020-06'
then price*quantity end) >= 100
and 
sum(case when left(order_date,7)='2020-07'
then price*quantity end) >= 100
;


with cte1 as (
    select o.customer_id, name
from
Orders o
join
Product p
on o.product_id = p.product_id
join
Customers c
on o.customer_id = c.customer_id
where left(order_date,7) = '2020-06'
group by o.customer_id, c.name
having sum(price*quantity) >= 100
),
cte2 as (
   select o.customer_id, name
from
Orders o
join
Product p
on o.product_id = p.product_id
join
Customers c
on o.customer_id = c.customer_id
where left(order_date,7) = '2020-07'
group by o.customer_id, c.name
having sum(price*quantity) >= 100 
)
select ab.customer_id,ab.name
from cte1 ab inner JOIN cte2 cd
on ab.customer_id = cd.customer_id;


CREATE Table if not exists TVProgram(
program_date date,
content_id VARCHAR(20),
channel VARCHAR(20),
constraint pk PRIMARY KEY(program_date,content_id)
);

alter table TVProgram modify content_id int;

CREATE Table if not exists Content(
content_id int,
title VARCHAR(20),
kids_content ENUM('Y','N'),
content_type VARCHAR(20),
constraint pk PRIMARY KEY(content_id)
);

INSERT into TVProgram VALUES
('2020-06-10 08:00', 1, 'LC-Channel'),
('2020-05-11 12:00', 2, 'LC-Channel'),
('2020-05-12 12:00', 3, 'LC-Channel'),
('2020-05-13 14:00', 4, 'Disney Ch'),
('2020-06-18 14:00', 4, 'Disney Ch'),
('2020-07-15 16:00', 5, 'Disney Ch');

insert into Content VALUES
(1, 'Leetcode Movie', 'N', 'Movies'),
(2, 'Alg. for Kids', 'Y', 'Series'),
(3, 'Database Sols', 'N', 'Series'),
(4, 'Aladdin', 'Y', 'Movies'),
(5, 'Cinderella', 'Y', 'Movies');


SELECT ct.title
from TVProgram tv
inner join Content ct
on tv.content_id = ct.content_id
where ct.kids_content = 'Y'
and ct.content_type = 'Movies'
and LEFT(tv.program_date,7) = '2020-06';

CREATE Table if not exists NPV(
id int,
year int,
npv int,
constraint pk PRIMARY KEY(id,year)
);

CREATE Table if not exists Queries(
id int,
year int,
constraint pk PRIMARY KEY(id,year)
);

INSERT into NPV VALUES
(1, 2018, 100),
(7, 2020, 30),
(13, 2019, 40),
(1, 2019, 113),
(2, 2008, 121),
(3, 2009, 12),
(11, 2020, 99),
(7, 2019, 0);

insert into Queries VALUES
(1, 2019),
(2, 2008),
(3, 2009),
(7, 2018),
(7, 2019),
(7,2020),
(13, 2019);

select q.id,q.year,IFNULL(n.npv,0) as NPV
from NPV n
right JOIN
Queries q
on q.id = n.id 
and q.year = n.year;

CREATE Table if not exists Employees(
id int,
name VARCHAR(20),
constraint pk PRIMARY KEY(id)
);

CREATE Table if not exists EmployeeUNI(
id int,
unique_id int,
constraint pk1 PRIMARY KEY(id,unique_id)
);

INSERT into Employees VALUES
(1, 'Alice'),
(7, 'Bob'),
(11, 'Meir'),
(90, 'Winston'),
(3, 'Jonathan');

INSERT INTO EmployeeUNI VALUES
(3, 1),
(11, 2),
(90, 3);

select em1.unique_id,em.name
from Employees em
left join EmployeeUNI em1
on em.id = em1.id
order by em1.unique_id;

CREATE Table if not exists Users(
id int,
name VARCHAR(20),
constraint pk PRIMARY KEY(id)
);

CREATE Table if not exists Rides(
id int,
user_id int,
distance int,
constraint pk PRIMARY KEY(id)
);

insert into Users VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Alex'),
(4, 'Donald'),
(7, 'Lee');

insert into Users VALUES
(13, 'Jonathan'),
(19, 'Elvis');

insert into Rides VALUES
(1, 1, 120),
(2, 2, 317),
(3, 3, 222),
(4, 7, 100),
(5, 13, 312),
(6, 19, 50),
(7, 7, 120),
(8, 19, 400),
(9, 7, 230);

select u.name,ifnull(sum(r.distance),0) as travelled_distance from 
Users u
left JOIN
Rides r
on u.id = r.user_id
GROUP BY u.name
order by sum(r.distance) desc, u.name asc;


CREATE Table if not exists Products(
product_id int not NULL,
product_name VARCHAR(20),
product_category varchar(20),
constraint pk PRIMARY KEY(product_id)
);

CREATE Table if not exists Orders(
product_id int not NULL,
order_date date,
unit int,
constraint fk Foreign Key (product_id) REFERENCES Products(product_id)
);


alter table Products MODIFY product_name VARCHAR(40);

insert into Products VALUES
(1, 'Leetcode Solutions', 'Book'),
(2, 'Jewels of Stringology', 'Book'),
(3, 'HP' ,'Laptop'),
(4, 'Lenovo' ,'Laptop'),
(5, 'Leetcode Kit', 'T-shirt');

INSERT INTO Orders VALUES
(1,'2020-02-05',60),
(1,'2020-02-10',70),
(2,'2020-01-18',30),
(2,'2020-02-11',80),
(3,'2020-02-17',2),
(3,'2020-02-24',3),
(4,'2020-03-01',20),
(4,'2020-03-04',30),
(4,'2020-03-04',60),
(5,'2020-02-25',50),
(5,'2020-02-27',50),
(5,'2020-03-10',50);

select pt.product_name,sum(ord.unit) as unit
from Products pt
inner join Orders ord
on pt.product_id = ord.product_id
where left(ord.order_date,7) = '2020-02'
group by pt.product_name
having sum(unit)>=100;


CREATE Table if not exists Movies(
movie_id int not NULL,
title VARCHAR(20),
constraint pk PRIMARY KEY(movie_id)
);
CREATE Table if not exists Users(
user_id int not NULL,
name VARCHAR(20),
constraint pk PRIMARY KEY(user_id)
);
CREATE Table if not exists MovieRating(
movie_id int not NULL,
user_id int,
rating int,
created_at DATE,
constraint pk PRIMARY KEY(movie_id,user_id)
);

INSERT into Movies VALUES
(1, 'Avengers'),
(2, 'Frozen 2'),
(3, 'Joker');

INSERT into Users VALUES
(1, 'Daniel'),
(2, 'Monica'),
(3, 'Maria'),
(4, 'James');

insert into MovieRating VALUES
(1, 1, 3, '2020-01-12'),
(1, 2, 4, '2020-02-11'),
(1, 3, 2, '2020-02-12'),
(1, 4, 1, '2020-01-01'),
(2, 1, 5, '2020-02-17'),
(2, 2, 2, '2020-02-01'),
(2, 3, 2, '2020-03-01'),
(3, 1, 3, '2020-02-22'),
(3, 2, 4, '2020-02-25');



with cte as(
select user_id,count(user_id) as total_count
from MovieRating
group by user_id)
select us.name from Users us
inner join cte ct
on us.user_id = ct.user_id
order By ct.total_count desc, us.name asc limit 1;

with cte1 as (SELECT movie_id,avg(rating) as average_rating from MovieRating
where left(created_at,7) = '2020-02'
group by movie_id
order by avg(rating) desc)
select mv.title from Movies mv
inner join cte1 ct
on mv.movie_id = ct.movie_id
order by ct.average_rating desc, mv.title asc limit 1;

CREATE Table if not exists Departments(
id int not NULL,
name int,
constraint pk PRIMARY KEY(id)
);

alter table Departments MODIFY name VARCHAR(20);
alter table Departments MODIFY name VARCHAR(40);
CREATE Table if not exists Students(
id int not NULL,
name VARCHAR(20),
department_id int,
constraint pk1 PRIMARY KEY(id)
);

alter table Students MODIFY name VARCHAR(40);

insert into Departments VALUES
(1, 'Electrical Engineering'),
(7, 'Computer Engineering'),
(13, 'Business Administration');

insert into Students VALUES
(23, 'Alice', 1),
(1, 'Bob', 7),
(5, 'Jennifer', 13),
(2, 'John', 14),
(4, 'Jasmine', 77),
(3, 'Steve', 74),
(6, 'Luis', 1),
(8, 'Jonathan', 7),
(7, 'Daiana', 33),
(11, 'Madelynn', 1);

select id, name from Students where department_id not in (select id FROM Departments);

CREATE Table if not exists Calls(
from_id int,
to_id int,
duration int
);

insert into Calls values
(1, 2, 59),
(2, 1, 11),
(1, 3, 20),
(3, 4, 100),
(3, 4, 200),
(3, 4, 200),
(4, 3, 499);


select from_id as person1,to_id as person2,
    count(duration) as call_count, sum(duration) as total_duration
from (select * 
      from Calls 
      union all
      select to_id, from_id, duration 
      from Calls) t1
where from_id < to_id
group by person1, person2;


CREATE Table if not exists Prices(
product_id int not NULL,
start_date date,
end_date date,
price int,
constraint pk PRIMARY KEY(product_id,start_date,end_date)
);

CREATE Table if not exists UnitsSold(
product_id int not NULL,
purchase_date date,
units int
);

insert INTO Prices VALUES
(1, '2019-02-17', '2019-02-28', 5),
(1, '2019-03-01', '2019-03-22', 20),
(2, '2019-02-01', '2019-02-20', 15),
(2, '2019-02-21', '2019-03-31', 30);

Insert into UnitsSold VALUES
(1, '2019-02-25', 100),
(1, '2019-03-01', 15),
(2, '2019-02-10', 200),
(2, '2019-03-22', 30);

select pt.product_id, round(sum(pt.price*us.units)/sum(us.units),2) as avg_selling_price
from Prices pt
inner join UnitsSold us
on pt.product_id = us.product_id
where us.purchase_date BETWEEN pt.start_date and pt.end_date
GROUP BY pt.product_id;

CREATE Table if not exists Warehouse(
name VARCHAR(17),
product_id int,
units int,
constraint pk PRIMARY KEY(name,product_id)
);

CREATE Table if not exists Products(
product_id int,
product_name VARCHAR(30),
width int,
length int,
height int,
constraint pk PRIMARY KEY(product_id)
);

insert into Warehouse VALUES
('LCHouse1', 1, 1),
('LCHouse1', 2, 10),
('LCHouse1', 3, 5),
('LCHouse2', 1, 2),
('LCHouse2', 2, 2),
('LCHouse3', 4, 1);

insert into Products VALUES
(1, 'LC-TV', 5, 50, 40),
(2, 'LC-KeyChain', 5, 5, 5),
(3, 'LC-Phone', 2, 10, 10),
(4, 'LC-T-Shirt', 4, 10, 20);

select w.name,sum(w.units*pt.width*pt.length*pt.height) as volume
from Warehouse w
inner join Products pt
on w.product_id = pt.product_id
group by w.name;

with cte as 
(select product_id,length*width*height as volume from Products
group by product_id)
select w.name,sum(w.units*ct.volume) as final_volume from Warehouse w
INNER join cte ct
on w.product_id = ct.product_id
GROUP BY w.name;


CREATE Table if not exists Sales(
sale_date date,
fruit ENUM('apples','oranges'),
sold_num int,
constraint pk PRIMARY KEY(sale_date,fruit)
);

INSERT into Sales VALUES
('2020-05-01', 'apples', 10),
('2020-05-01', 'oranges', 8),
('2020-05-02', 'apples', 15),
('2020-05-02', 'oranges', 15),
('2020-05-03', 'apples', 20),
('2020-05-03','oranges', 0),
('2020-05-04', 'apples', 15),
('2020-05-04', 'oranges', 16);

SELECT * from Sales;
with cte1 as (
select sale_date,sold_num
from Sales
where fruit = 'apples'
ORDER BY sale_date),
cte2 as (
select sale_date,sold_num
from Sales
where fruit = 'oranges'
ORDER BY sale_date)
select c.sale_date,c.sold_num - d.sold_num as difference FROM
cte1 c
inner join cte2 d
on c.sale_date = d.sale_date
ORDER BY sale_date;

select s.sale_date,
    sum(if(s.fruit = 'apples', s.sold_num, -s.sold_num)) as diff
from Sales s
group by s.sale_date;

CREATE Table if not exists Activity(
player_id int not NULL,
device_id int,
event_date DATE,
games_played int,
constraint pk PRIMARY KEY(player_id,event_date)
);

insert into Activity VALUES
(1, 2, '2016-03-01', 5),
(1, 2, '2016-03-02', 6),
(2, 3, '2017-06-25', 1),
(3, 1, '2016-03-02', 0),
(3, 4, '2018-07-03', 5);

select * from Activity;

with cte as(
select player_id,event_date,
lead(event_date,1) over(partition by player_id ORDER BY event_date) as next_date
from Activity)
select round(count(ct.player_id)/(select count(distinct(player_id)) from Activity),2) as fraction
from cte ct
where DATEDIFF(next_date,event_date) = 1;



CREATE Table if not exists Employee(
id int not NULL,
name VARCHAR(20),
deparment VARCHAR(20),
managerId int DEFAULT NULL,
constraint pk PRIMARY KEY(id)
);

drop table Employee;

insert into Employee VALUES
(101, 'John', 'A',NULL),
(102, 'Dan', 'A', 101),
(103, 'James', 'A', 101),
(104, 'Amy', 'A', 101),
(105, 'Anne', 'A', 101),
(106, 'Ron', 'B', 101);

SELECT * from Employee;

select e.name
from Employee e
inner join Employee m
on e.id = m.managerId
GROUP BY e.id
having e.id >=5;

CREATE Table if not exists Student(
student_id int not NULL,
student_name VARCHAR(20),
gender VARCHAR(1),
dept_id int,
constraint pk PRIMARY KEY(student_id)
);

ALTER TABLE Student ADD FOREIGN KEY (dept_id) REFERENCES Department(dept_id);

CREATE Table if not exists Department(
dept_id int not NULL,
dept_name VARCHAR(20),
constraint pk PRIMARY KEY(dept_id)
);

insert INTO Student VALUES
(1, 'Jack', 'M', 1),
(2, 'Jane', 'F', 1),
(3, 'Mark', 'M', 2);

insert into Department VALUES
(1, 'Engineering'),
(2, 'Science'),
(3, 'Law');

select distinct(d.dept_name),count(s.student_id) 
over(PARTITION BY d.dept_id) as student_number    
from Department d
left join Student s
on d.dept_id = s.dept_id
order by student_number desc, d.dept_name asc;

CREATE Table if not exists Customer(
customer_id int not NULL,
product_key int,
constraint fk Foreign Key (product_key) REFERENCES Product(product_key)
);

CREATE Table if not exists Product(
product_key int not NULL,
constraint pk PRIMARY KEY(product_key)
);

insert into Product VALUES
(5),
(6);

insert into Customer VALUES
(1, 5),
(2, 6),
(3, 5),
(3, 6),
(1, 6);

select customer_id from Customer
group by customer_id
having count(distinct(product_key)) = (select count(*) from Product);

CREATE Table if not exists Project(
project_id int not NULL,
employee_id int,
constraint pk PRIMARY KEY(project_id,employee_id),
constraint fk1 Foreign Key (employee_id) REFERENCES Employee(employee_id)
);

CREATE Table if not exists Employee(
employee_id int,
name VARCHAR(20),
experience_years int,
constraint pk PRIMARY KEY(employee_id)
);


insert into Employee VALUES
(1, 'Khaled', 3),
(2, 'Ali', 2),
(3, 'John', 3),
(4, 'Doe', 2);

insert into Project VALUES
(1, 1),
(1, 2),
(1, 3),
(2, 1),
(2, 4);


with cte as (
select max(e.experience_years)
over(PARTITION BY project_id) as max_experience
from Project p
inner join Employee e
on p.employee_id = e.employee_id)
select p.project_id,e.employee_id from Project p 
inner join Employee e
on p.employee_id = e.employee_id
where e.experience_years in (select distinct(max_experience) from cte)
ORDER BY p.project_id;

CREATE Table if not exists Books(
book_id int not NULL,
name VARCHAR(20),
available_from DATE,
constraint pk PRIMARY KEY(book_id)
);

CREATE Table if not exists Orders(
order_id int not NULL,
book_id int,
quantity int,
dispatch_date DATE,
constraint pk PRIMARY KEY(order_id),
constraint fk2 Foreign Key (book_id) REFERENCES Books(book_id)
);

insert into Books VALUES
(1, "Kalila And Demna", '2010-01-01'),
(2, "28 Letters", '2012-05-12'),
(3, "The Hobbit", '2019-06-10'),
(4, "13 Reasons Why", '2019-06-01'),
(5, "The Hunger Games", '2008-09-21');

insert into Orders VALUES
(1,1,2,'2018-07-26'),
(2,1,1,'2018-11-05'),
(3,3,8,'2019-06-11'),
(4,4,6,'2019-06-05'),
(5,4,5,'2019-06-20'),
(6,5,9,'2009-02-02'),
(7,5,8,'2010-04-13');


select * from Books;
select * from Orders;


select book_id, name 
from Books
where book_id not in (
    select book_id 
    from Orders 
    where (dispatch_date between date_sub('2019-06-23',interval 1 year) and '2019-06-23') 
    group by (book_id) 
    having sum(quantity) >= 10)
and 
    available_from < date_sub('2019-06-23', interval 1 month)



CREATE Table if not exists Enrollments(
student_id int not NULL,
course_id int,
grade int,
constraint pk PRIMARY KEY(student_id,course_id)
);

insert into Enrollments VALUES
(2, 2, 95),
(2, 3, 95),
(1, 1, 90),
(1, 2, 99),
(3, 1, 80),
(3, 2, 75),
(3, 3, 82);

SELECT * FROM Enrollments;
with cte as (
select *,rank()
over(PARTITION BY student_id ORDER BY grade desc,course_id) as rn FROM Enrollments)
select student_id,course_id,grade from cte where rn = 1;

drop table Teams;
CREATE Table if not exists Players(
player_id int not NULL,
group_id int,
constraint pk PRIMARY KEY(player_id)
);

CREATE Table if not exists Matches(
match_id int not NULL,
first_player int,
second_player int,
first_score int,
second_score int,
constraint pk PRIMARY KEY(match_id)
);

insert into Players VALUES
(15, 1),
(25, 1),
(30, 1),
(45, 1),
(10, 2),
(35, 2),
(50, 2),
(20, 3),
(40, 3);

insert into Matches VALUES
(1, 15, 45, 3, 0), 
(2, 30, 25, 1, 2), 
(3, 30, 15, 2, 0),
(4, 40, 20, 5, 2),    
(5, 35, 50, 1, 1);



with cte as (
select sc.group_id group_id, sc.player_id player_id, 
       rank() over (partition by sc.group_id order by sum(sc.score) desc, sc.player_id asc) as rnk 
    from(
        select p.group_id group_id,
         p.player_id player_id ,
         sum(m.first_score) as score
        from Players p
        inner join Matches m
        on p.player_id = m.first_player
        group by p.group_id,p.player_id
        
        union all
        
        select p.group_id group_id,
         p.player_id player_id ,
        sum(second_score) as score
        from Players p
        inner join Matches m
        on p.player_id = m.second_player
        group by p.group_id,p.player_id
    ) sc
    group by sc.group_id,sc.player_id)
    select group_id,player_id from cte where rnk =1;


