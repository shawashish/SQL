
CREATE Table if not exists UserActivity(
username varchar(20),
activity varchar(20),
startDate Date,
endDate Date
);

insert into UserActivity VALUES
('Alice', 'Travel', '2020-02-12', '2020-02-20'),
('Alice', 'Dancing', '2020-02-21', '2020-02-23'),
('Alice', 'Travel', '2020-02-24', '2020-02-28'),
('Bob', 'Travel', '2020-02-11', '2020-02-18');
with cte as (
select *,
rank() over(PARTITION BY username ORDER BY startDate desc) as rn,
count(*) OVER(PARTITION BY username) as net_count
from UserActivity)
select username,activity,startDate,endDate from cte
where (rn = 2 and net_count <> 1) or (rn =1 and net_count = 1);

CREATE Table if not exists Students(
id int NOT NULL,
name varchar(20),
marks int,
constraint pk PRIMARY KEY(id)
);
drop table Students;
INSERT into Students VALUES
(1,'Ashley',81),
(2,'Samantha',75),
(4,'Julia',76),
(3,'Belvet',84);

select name from Students where marks >75
ORDER BY RIGHT(name,3);

CREATE Table if not exists Employee(
employee_id int,
name varchar(20),
month int,
salary int,
constraint pk PRIMARY KEY(employee_id)
);

insert into Employee VALUES
(12228,'Rose',15,1968),
(33645,'Angela',1,13443),
(45692,'Frank',17,1608),
(56118,'Patrick',7,1345),
(59725,'Lisa',11,2330),
(74197,'Kimberly',16,4371),
(78454,'Bonnie',8,1771),
(83565,'Michael',6,2017),
(98607,'Todd',5,3396),
(99989,'Joe',9,3573);

select name from Employee
where salary > 2000
and month < 10
ORDER BY employee_id;


CREATE Table if not exists TRIANGLES(
a int,
b int,
c int
);

insert into TRIANGLES VALUES
(20,20,23),
(20,20,20),
(20,21,22),
(13,14,30);

select
case when a + b < c then 'Not a Triangle'
     when a = b and b = c and c = a then 'Equilateral'
     when (a=b) or (b=c) or (c=a) then 'Isosceles'
     when a <> b <> c then 'Scalene'
END
as traingletype
from TRIANGLES;

CREATE Table if not exists Employees(
id int,
name varchar(20),
salary int,
constraint pk PRIMARY KEY(id)
);

insert into Employees VALUES
(1,'Kristeen',1420),
(2,'Ashley',2006),
(3,'Julia',2210),
(4,'Maria',3000);

with cte as(
select avg(salary) as actual_avg_salary,avg(replace(salary,'0','')) as wrong_avg_salary 
from Employees)
select round(actual_avg_salary - wrong_avg_salary) as diff
from cte;

CREATE Table if not exists Employee(
employee_id int,
name varchar(20),
months int,
salary int,
constraint pk PRIMARY KEY(employee_id)
);

insert into Employee VALUES
(12228,'Rose',15,1968),
(33645,'Angela',1,13443),
(45692,'Frank',17,1608),
(56118,'Patrick',7,1345),
(59725,'Lisa',11,2330),
(74197,'Kimberly',16,4371),
(78454,'Bonnie',8,1771),
(83565,'Michael',6,2017),
(98607,'Todd',5,3396),
(99989,'Joe',9,3573);

select concat_ws(' ',max(months * salary),count(*)) as output from Employee
where (salary * months)>= (select max(salary * months) from Employee);

CREATE Table if not exists OCCUPATIONS(
name varchar(20),
occupation VARCHAR(20)
);

INSERT into OCCUPATIONS VALUES
('Samantha','Doctor'),
('Julia','Actor'),
('Maria','Actor'),
('Meera','Singer'),
('Ashley','Professor'),
('Ketty','Professor'),
('Christeen','Professor'),
('Jane','Actor'),
('Jenny','Doctor'),
('Priya','Singer');

select concat(name,'(',left(occupation,1),')') from OCCUPATIONS
ORDER BY name asc;

select concat('There are a total of ',count(*),' ',lower(occupation),'s') from OCCUPATIONS
group by occupation
order by count(*), occupation;

with cte as (
select
        NameOrder,
        max(case Occupation when 'Doctor' then Name end) as Doctor,
        max(case Occupation when 'Professor' then Name end) as Professor,
        max(case Occupation when 'Singer' then Name end) as Singer,
        max(case Occupation when 'Actor' then Name end) as Actor
    from(select
                Occupation,
                Name,
                row_number() over(partition by Occupation order by Name ASC) as NameOrder
            from OCCUPATIONS) as Namelists
            GROUP BY nameorder)
select Doctor,Professor,Singer,Actor from cte;


CREATE Table if not exists BST(
N int,
P int
);

INSERT into BST VALUES
(1,2),
(3,2),
(6,8),
(9,8),
(2,5),
(8,5),
(5,NULL);

select * from BST;

select N,
case when P is null then 'Root'
     when N in (select P from BST) then 'Inner'
     else 'Leaf'
     end
from BST
ORDER BY N;

CREATE Table if not exists Company(
company_code VARCHAR(10),
founder VARCHAR(20),
constraint pk PRIMARY KEY(company_code)
);
drop table Company;
CREATE Table if not exists Lead_Manager(
company_code VARCHAR(10),
lead_manager_code VARCHAR(10),
constraint pk PRIMARY KEY(lead_manager_code),
constraint fk Foreign Key(company_code) REFERENCES Company(company_code)
);

CREATE Table if not exists Senior_Manager(
senior_manager_code VARCHAR(10),
company_code VARCHAR(10),
lead_manager_code VARCHAR(10),
constraint pk PRIMARY KEY(senior_manager_code),
constraint fk1 Foreign Key(company_code) REFERENCES Company(company_code),
constraint fk2 Foreign Key(lead_manager_code) REFERENCES Lead_Manager(lead_manager_code)
);

CREATE Table if not exists Manager(
manager_code VARCHAR(10),
senior_manager_code VARCHAR(10),
company_code VARCHAR(10),
lead_manager_code VARCHAR(10),
constraint pk PRIMARY KEY(manager_code),
constraint fk3 Foreign Key(company_code) REFERENCES Company(company_code),
constraint fk4 Foreign Key(senior_manager_code) REFERENCES Senior_Manager(senior_manager_code),
constraint fk5 Foreign Key(lead_manager_code) REFERENCES Lead_Manager(lead_manager_code)
);

CREATE Table if not exists Employee(
employee_code VARCHAR(10),
manager_code VARCHAR(10),
senior_manager_code VARCHAR(10),
company_code VARCHAR(10),
lead_manager_code VARCHAR(10),
constraint pk PRIMARY KEY(employee_code),
constraint fk6 Foreign Key(manager_code) REFERENCES Manager(manager_code),
constraint fk7 Foreign Key(company_code) REFERENCES Company(company_code),
constraint fk8 Foreign Key(senior_manager_code) REFERENCES Senior_Manager(senior_manager_code),
constraint fk9 Foreign Key(lead_manager_code) REFERENCES Lead_Manager(lead_manager_code)
);

Insert INTO Company VALUES
('C1','Monika'),
('C2','Samantha');

insert into Lead_Manager VALUES
('C1','LM1'),
('C2','LM2');

INSERT INTO Senior_Manager VALUES
('SM1','C1','LM1'),
('SM2','C1','LM1'),
('SM3','C2','LM2');

INSERT into Manager VALUES
('M1','SM1','C1','LM1'),
('M2','SM3','C2','LM2'),
('M3','SM3','C2','LM2');

INSERT INTO Employee VALUES
('E1','M1','SM1','C1','LM1'),
('E2','M1','SM1','C1','LM1'),
('E3','M2','SM3','C2','LM2'),
('E4','M3','SM3','C2','LM2');

SELECT c.company_code, c.founder,count(distinct lm.lead_manager_code),
count(distinct sm.senior_manager_code),count(distinct m.manager_code),count(distinct e.employee_code)
from Company c
inner join Lead_Manager lm
using(company_code)
inner join Senior_Manager sm
using(lead_manager_code)
inner join Manager m
using(senior_manager_code)
inner join Employee e
using(manager_code)
group BY c.company_code,c.founder
ORDER BY c.company_code;
