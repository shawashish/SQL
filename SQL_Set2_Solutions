CREATE Table if not exists World(
name VARCHAR(30),
continent VARCHAR(20),
area int,
population int,
gdp int,
constraint pk PRIMARY KEY(name)
);

ALTER TABLE World MODIFY gdp BIGINT;

INSERT into World VALUES
('Afghanistan', 'Asia', 652230, 25500100, 20343000000),
('Albania', 'Europe', 28748, 2831741, 12960000000),
('Algeria', 'Africa', 2381741, 37100000, 188681000000),
('Andorra', 'Europe', 468, 78115, 3712000000),
('Angola', 'Africa', 1246700, 20609294, 100990000000);

SELECT name,population,area FROM World where area >=3000000 or population >= 25000000;

CREATE Table if not exists Customer(
id int not NULL,
name VARCHAR(20),
refree_id int,
constraint pk PRIMARY KEY(id)
);

INSERT INTO Customer VALUES
(1, 'Will', null),
(2, 'Jane', null),
(3, 'Alex', 2),
(4, 'Bill', null),
(5, 'Zack', 1),
(6, 'Mark', 2);

SELECT name from Customer where refree_id != 2 or refree_id is NULL;

CREATE Table if not exists Customers(
id int not NULL,
name VARCHAR(20),
constraint pk PRIMARY KEY(id)
);

CREATE Table if not exists Orders(
id int not NULL,
customerId int,
constraint pk PRIMARY KEY(id),
constraint fk Foreign Key (customerId) REFERENCES Customers(id)
);

insert into Customers VALUES
(1, 'Joe'),
(2, 'Henry'),
(3, 'Sam'),
(4, 'Max');

INSERT into Orders VALUES
(1, 3),
(2, 1);

select name from Customers where id not in (select customerId from Orders);


CREATE Table if not exists Employee(
employee_id int not NULL,
team_id int,
constraint pk PRIMARY KEY(employee_id)
);

INSERT into Employee VALUES
(1, 8),
(2, 8),
(3, 8),
(4, 7),
(5, 9),
(6, 9);

SELECT employee_id,count(team_id)
over(PARTITION BY team_id) as team_size
from Employee
ORDER BY employee_id;

CREATE Table if not exists Person
(id int NOT NULL,
name VARCHAR(30),
phone_number VARCHAR(20),
constraint pk PRIMARY KEY(id)
);

CREATE Table if not exists Country(
name VARCHAR(30),
country_code VARCHAR(3),
constraint pk PRIMARY KEY(country_code)
);

CREATE Table if not exists Calls
(caller_id int NOT NULL,
callee_id int,
duration int
);

insert into Person VALUES
(3, 'Jonathan', '051-1234567'),
(12, 'Elvis', '051-7654321'),
(1, 'Moncef', '212-1234567'),
(2, 'Maroua', '212-6523651'),
(7, 'Meir', '972-1234567'),
(9, 'Rachel', '972-0011100');

INSERT into Country VALUES
('Peru', 51),
('Israel', 972),
('Morocco', 212),
('Germany', 49),
('Ethiopia', 251);

INSERT INTO Calls values
(1, 9, 33),
(2, 9, 4),
(1, 2, 59),
(3, 12, 102),
(3, 12, 330),
(12, 3, 5),
(7, 9, 13),
(7, 1, 3),
(9, 7, 1),
(1, 7, 7);

select sum(duration)/(select count(*) from Country) as global_average from Calls;

update Country set country_code = '049' where name = 'Germany';
update Country set country_code = '051' where name = 'Peru';
select c.name from Person p inner join
Country c on left(p.phone_number,3) = c.country_code
inner join (
select caller_id as id, duration from Calls
UNION ALL
select callee_id as id, duration from Calls) cal
on p.id = cal.id
group by c.name
having avg(cal.duration) > (select avg(duration) FROM Calls);



CREATE Table if not exists Activity(
player_id int not NULL,
device_id int,
event_date date,
games_played int,
constraint pk PRIMARY KEY(player_id,event_date)
);

insert into Activity VALUES
(1, 2, '2016-03-01', 5),
(1, 2, '2016-05-02', 6),
(2, 3, '2017-06-25', 1),
(3, 1, '2016-03-02', 0),
(3, 4, '2018-07-03', 5);


select player_id,device_id from (
select player_id,device_id,
row_number() OVER(PARTITION BY player_id) as rn
from Activity) a
where a.rn =1;

CREATE Table if not exists Orders(
order_number int NOT NULL,
customer_number int,
constraint pk PRIMARY KEY(order_number)
);

INSERT into Orders VALUES
(1, 1),
(2, 2),
(3,3),
(4, 3);

select customer_number from (
select customer_number,
RANK() over(PARTITION BY customer_number) as rn
from Orders) a
ORDER BY a.rn desc limit 1;

INSERT into Orders VALUES
(5, 2);

SELECT * FROM Orders;
with cte as (
select customer_number,
RANK() over(PARTITION BY customer_number ORDER BY order_number) as rn
from Orders)
select customer_number from cte where rn = (select max(rn) from cte);

CREATE Table if not exists Cinema(
seat_id int not NULL,
free BOOLEAN,
constraint pk PRIMARY KEY(seat_id)
);

insert into Cinema VALUES
(1, 1),
(2, 0),
(3, 1),
(4, 1),
(5, 1);

with cte as (
select seat_id,
lead(seat_id,1,0) over() as next_seat
from Cinema
ORDER BY seat_id)
select c.seat_id from Cinema c
inner join cte ct
on c.seat_id = ct.next_seat
where c.free = 1;

CREATE Table if not exists SalesPerson(
sales_id int NOT NULL,
name VARCHAR(20),
salary int,
commission_rate int,
hire_date DATE,
constraint pk PRIMARY KEY(sales_id)
);

CREATE Table if not exists Company(
com_id int,
name VARCHAR(20),
city VARCHAR(20),
constraint pk PRIMARY KEY(com_id)
);

CREATE Table if not exists Orders(
order_id int not NULL,
order_date DATE,
com_id int,
sales_id int,
amount int,
constraint pk PRIMARY KEY(order_id),
constraint fk1 Foreign Key (com_id) REFERENCES Company(com_id),
constraint fk2 Foreign Key (sales_id) REFERENCES SalesPerson(sales_id)
);

insert into SalesPerson VALUES
(1, 'John', 100000, 6, STR_TO_DATE('4/1/2006','%m/%d/%Y')),
(2, 'Amy', 12000, 5, STR_TO_DATE('5/1/2010','%m/%d/%Y')),
(3, 'Mark', 65000, 12, STR_TO_DATE('12/25/2008','%m/%d/%Y')),
(4, 'Pam', 25000, 25, STR_TO_DATE('1/1/2005','%m/%d/%Y')),
(5, 'Alex', 5000, 10, STR_TO_DATE('2/3/2007','%m/%d/%Y'));

SELECT * FROM SalesPerson;

insert into Company VALUES
(1, 'RED', 'Boston'),
(2, 'ORANGE', 'New York'),
(3, 'YELLOW', 'Boston'),
(4, 'GREEN', 'Austin');

INSERT INTO Orders VALUES
(1, STR_TO_DATE('1/1/2014','%m/%d/%Y'), 3, 4, 10000),
(2, STR_TO_DATE('2/1/2014','%m/%d/%Y'), 4, 5, 5000),
(3, STR_TO_DATE('3/1/2014','%m/%d/%Y'), 1, 1, 50000),
(4, STR_TO_DATE('4/1/2014','%m/%d/%Y'), 1, 4, 25000);

select name from SalesPerson where sales_id not in (
select sales_id from Orders where com_id = (select com_id from Company where name = 'Red'));

CREATE Table if not exists Triangle(
x int NOT NULL,
y int,
z int,
constraint pk PRIMARY KEY(x,y,z)
);

insert into Triangle VALUES
(13, 15, 30),
(10, 20, 15);

select *,
case when x+y > z then 'Yes'
     else 'No'
     end as triangle
from Triangle;


CREATE Table if not exists Point(
x int NOT NULL,
constraint pk PRIMARY KEY(x)
);

insert into Point VALUES
(-1),
(0),
(2);

select min(abs(p.x-p1.x)) as shortest_distance from Point p
inner join Point p1
on p.x != p1.x;

CREATE Table if not exists ActorDirector(
actor_id int NOT NULL,
director_id int,
TIMESTAMP int,
constraint pk PRIMARY KEY(TIMESTAMP)
);

insert into ActorDirector VALUES
(1, 1, 0),
(1, 1, 1),
(1, 1, 2),
(1, 2, 3),
(1, 2, 4),
(2, 1, 5),
(2, 1, 6);


select distinct(actor_id),director_id from (
select *,count(*)
over(PARTITION BY actor_id,director_id) as net_count
from ActorDirector) a
where a.net_count >= 3;

CREATE Table if not exists Sales(
sale_id int,
product_id int,
year int,
quantity int,
price int,
constraint pk PRIMARY KEY(sale_id,year),
constraint fk Foreign Key (product_id) REFERENCES Product(product_id)
);

CREATE Table if not exists Product(
product_id int,
product_name varchar(20),
constraint pk PRIMARY KEY(product_id)
);

insert into Sales VALUES
(1, 100, 2008, 10, 5000),
(2, 100, 2009, 12, 5000),
(7, 200, 2011, 15, 9000);

INSERT into Product VALUES
(100, 'Nokia'),
(200, 'Apple'),
(300, 'Samsung');

select p.product_name as ProductName,s.year as Year,
s.price as Price
from Product p
inner JOIN
Sales s
USING(product_id);

CREATE Table if not exists Project(
project_id int NOT NULL,
employee_id int,
constraint pk PRIMARY KEY(project_id, employee_id))
;

CREATE Table if not exists Employee(
employee_id int NOT NULL,
name varchar(20),
experience_years int,
constraint pk PRIMARY KEY(employee_id))
;

INSERT INTO Project VALUES
(1, 1),
(1, 2),
(1, 3),
(2, 1),
(2, 4);

INSERT INTO Employee VALUES
(1, 'Khaled', 3),
(2, 'Ali', 2),
(3, 'John', 1),
(4, 'Doe', 2);

select p.project_id,
round(avg(e.experience_years),2) as avg_experience
from Project p
INNER JOIN
Employee e
USING(employee_id)
GROUP BY p.project_id;


CREATE Table if not exists Product(
product_id int NOT NULL,
product_name varchar(20),
unit_price int,
constraint pk PRIMARY KEY(product_id)
);

CREATE Table if not exists Sales(
seller_id int NOT NULL,
product_id int,
buyer_id int,
sale_date date,
quantity int,
price int,
constraint fk Foreign Key (product_id) REFERENCES Product(product_id)
);

INSERT INTO Product VALUES
(1, 'S8', 1000),
(2, 'G4', 800),
(3, 'iPhone', 1400);

INSERT into Sales VALUES
(1, 1, 1, '2019-01-21', 2, 2000),
(1, 2, 2, '2019-02-17', 1, 800),
(2, 2, 3, '2019-06-02', 1, 800),
(3, 3, 4, '2019-05-13', 2, 2800);

with cte as (
select seller_id,
sum(price) as total_price
from Sales
GROUP BY seller_id)
select seller_id from cte
where total_price = (select max(total_price) from cte);


select s.buyer_id as BuyerId
from Product p
INNER join Sales s
USING(product_id)
where p.product_name = 'S8'
and p.product_name != 'iPhone';


CREATE Table if not exists Customer(
customer_id int NOT NULL,
name varchar(20),
visited_on date,
amount int,
constraint pk PRIMARY KEY(customer_id,visited_on)
);

INSERT into Customer VALUES
(1, 'Jhon', '2019-01-01', 100),
(2, 'Daniel', '2019-01-02', 110),
(3, 'Jade', '2019-01-03', 120),
(4, 'Khaled', '2019-01-04', 130),
(5, 'Winston', '2019-01-05', 110),
(6, 'Elvis', '2019-01-06', 140),
(7, 'Anna', '2019-01-07', 150),
(8, 'Maria', '2019-01-08', 80),
(9, 'Jaze', '2019-01-09', 110),
(1, 'Jhon', '2019-01-10', 130),
(3, 'Jade', '2019-01-10', 150);

with cte1 as 
(select visited_on,SUM(amount) as amount
FROM Customer
GROUP BY visited_on
ORDER BY visited_on),
cte2 as (
select visited_on,
sum(amount) 
OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as running_sum,
avg(amount) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as running_avg,
dense_rank() OVER(order by visited_on) as rn
from cte1)
select visited_on,running_sum,round(running_avg,2) from cte2 where rn>6;


CREATE Table if not exists Scores(
player_name varchar(20),
gender varchar(1),
day date,
score_points int,
constraint pk PRIMARY KEY(gender,day)
);

INSERT INTO Scores VALUES
('Aron', 'F', '2020-01-01', 17),
('Alice', 'F', '2020-01-07', 23),
('Bajrang', 'M', '2020-01-07', 7),
('Khali', 'M', '2019-12-25', 11),
('Slaman', 'M', '2019-12-30', 13),
('Joe', 'M', '2019-12-31', 3),
('Jose', 'M', '2019-12-18', 2),
('Priya', 'F', '2019-12-31' ,23),
('Priyanka', 'F', '2019-12-30', 17);

select gender,day,
sum(score_points) OVER(PARTITION BY gender ORDER BY day) as total
from Scores;


CREATE Table if not exists Logs(
log_id int,
constraint pk PRIMARY KEY(log_id)
);

INSERT INTO Logs VALUES
(1),
(2),
(3),
(7),
(8),
(10);

select min(log_id) as start_id, max(log_id) as end_id from (
select log_id,log_id - row_num as diff
from (
select log_id, 
row_number() over() as row_num from Logs) a ) b
GROUP BY diff;


CREATE Table if not exists Students(
student_id int,
student_name varchar(20),
constraint pk PRIMARY KEY(student_id)
);


CREATE Table if not exists Subjects(
subject_name varchar(20),
constraint pk PRIMARY KEY(subject_name)
);


CREATE Table if not exists Examinations(
student_id int,
subject_name varchar(20)
);

INSERT into Students VALUES
(1, 'Alice'),
(2, 'Bob'),
(13, 'John'),
(6, 'Alex');

INSERT INTO Subjects VALUES
('Math'),
('Physics'),
('Programming');

INSERT INTO Examinations VALUES
(1, 'Math'),
(1, 'Physics'),
(1, 'Programming'),
(2, 'Programming'),
(1, 'Physics'),
(1, 'Math'),
(13, 'Math'),
(13, 'Programming'),
(13, 'Physics'),
(2, 'Math'),
(1, 'Math');


select distinct(st.student_id),
s.subject_name,
st.student_name,
count(subject_name) OVER(partition by student_name,subject_name)
from Examinations e
cross JOIN Subjects s
using(subject_name)
right JOIN Students st
USING(student_id)
ORDER BY student_id;


select t.student_id, t.student_name, t.subject_name, 
    if(e.attended_exams is null, 0, e.attended_exams) as attended_exams
from
    (select *
    from Students
    cross join Subjects) t
left join 
    (select *, count(*) as attended_exams
    from Examinations
    group by student_id, subject_name) e
on t.student_id = e.student_id and t.subject_name = e.subject_name
order by student_id, subject_name;


CREATE Table if not exists Employees(
employee_id int NOT NULL,
employee_name varchar(20),
manager_id int,
constraint pk PRIMARY KEY(employee_id)
);


INSERT into Employees VALUES
(1, 'Boss', 1),
(3, 'Alice', 3),
(2, 'Bob', 1),
(4, 'Daniel', 2),
(7, 'Luis', 4),
(8, 'Jhon', 3),
(9, 'Angela', 8),
(77, 'Robert', 1);

with cte as (
SELECT employee_id from Employees 
where manager_id = 1
and employee_id != 1),
cte2 as(
select employee_id from Employees where manager_id in (select employee_id from cte)),
cte3 as (
select employee_id from Employees where manager_id in (select employee_id from cte2))
select employee_id from cte UNION all select employee_id from cte2 union all select employee_id from cte3
ORDER BY employee_id;


CREATE Table if not exists Transactions(
id int NOT NULL,
country varchar(20),
state enum('approved','declined'),
amount int,
trans_date date,
constraint pk PRIMARY KEY(id)
);

INSERT into Transactions VALUES
(121, 'US', 'approved', 1000, '2018-12-18'),
(122, 'US', 'declined', 2000, '2018-12-19'),
(123, 'US', 'approved', 2000, '2019-01-01'),
(124, 'DE', 'approved', 2000, '2019-01-07');


with cte as(
    select *,count(*) OVER(PARTITION BY country,LEFT(trans_date,7)) as net_count,
    sum(amount) OVER(PARTITION BY country,LEFT(trans_date,7)) as approved_amount
      from Transactions where state = 'approved' 
),
cte1 as(
select *,
count(*) OVER(PARTITION BY left(trans_date,7),country) as trans_count,
sum(amount) OVER(PARTITION BY left(trans_date,7),country) as total_amount
from Transactions)
select left(a.trans_date,7),a.country,a.trans_count,a.total_amount,b.net_count,b.approved_amount
from cte1 a INNER join cte b on a.id = b.id;


CREATE Table if not exists Actions(
user_id int not NULL,
post_id int,
action_date date,
action enum('view', 'like', 'reaction', 'comment', 'report', 'share'),
extra varchar(20)
);

CREATE Table if not exists Removals(
post_id int NOT NULL,
remove_date date,
constraint pk PRIMARY KEY(post_id)
);

INSERT into Actions VALUES
(1, 1, '2019-07-01', 'view', 'null'),
(1, 1, '2019-07-01', 'like', 'null'),
(1, 1, '2019-07-01', 'share', 'null'),
(2, 2, '2019-07-04', 'view', 'null'),
(2, 2, '2019-07-04', 'report', 'spam'),
(3, 4, '2019-07-04', 'view', 'null'),
(3, 4, '2019-07-04', 'report', 'spam'),
(4, 3, '2019-07-02', 'view', 'null'),
(4, 3, '2019-07-02', 'report', 'spam'),
(5, 2, '2019-07-03', 'view', 'null'),
(5, 2, '2019-07-03', 'report', 'racism'),
(5, 5, '2019-07-03', 'view', 'null'),
(5, 5, '2019-07-03', 'report', 'racism');

INSERT INTO Removals VALUES
(2, '2019-07-20'),
(3, '2019-07-18');

with cte as 
(select *,count(post_id) 
over(PARTITION BY action_date) as spam_count
from Actions where extra = 'spam'),
cte2 as(
select *,count(*)
over(PARTITION BY action_date) as removed_count from Removals r INNER JOIN cte ct
USING(post_id))
select round(avg(b.removed_count/a.spam_count * 100)) as net_percentage FROM cte a
INNER join cte2 b
USING(post_id);

CREATE Table if not exists Activity(
player_id int NoT NULL,
device_id int,
event_date date,
games_played int,
constraint pk PRIMARY KEY(player_id, event_date)
);

INSERT into Activity VALUES
(1, 2, '2016-03-01', 5),
(1, 2, '2016-03-02', 6),
(2, 3, '2017-06-25', 1),
(3, 1, '2016-03-02', 0),
(3, 4, '2018-07-03', 5);

with cte as (
select player_id,event_date,lead(event_date,1,0)
over(PARTITION BY player_id) as next_date
from Activity)
select round(count(*)/(select count(distinct(player_id)) from Activity),2) as fraction
from cte where DATEDIFF(next_date,event_date) = 1

CREATE Table if not exists Salaries(
company_id int NOT NULL,
employee_id int,
employee_name varchar(20),
salary int,
constraint pk PRIMARY KEY(company_id, employee_id)
);

INSERT INTO Salaries VALUES
(1, 1, 'Tony', 2000),
(1, 2, 'Pronub', 21300),
(1, 3, 'Tyrrox', 10800),
(2, 1, 'Pam', 300),
(2, 7, 'Bassem', 450),
(2, 9, 'Hermione', 700),
(3, 7, 'Bocaben', 100),
(3, 2, 'Ognjen', 2200),
(3, 13, 'Nyan Cat', 3300),
(3, 15, 'Morning Cat', 7777);

select company_id,employee_id,
employee_name,
case when salary < 1000 then salary
     when salary BETWEEN 1000 and 10000 then round((salary - salary*24/100))
     when salary > 10000 then round((salary - salary*49/100))
     end as salary
from Salaries;


CREATE Table if not exists Variables(
name varchar(20),
value int,
constraint pk PRIMARY KEY(name)
);

CREATE Table if not exists Expressions(
left_operand varchar(20),
operator enum('<', '>', '='),
right_operand varchar(20),
constraint pk PRIMARY KEY(left_operand, operator, right_operand)
);

insert into Variables VALUES
('x', 66),
('y', 77);

INSERT INTO Expressions VALUES
('x', '>', 'y'),
('x', '<', 'y'),
('x', '=', 'y'),
('y', '>', 'x'),
('y', '<', 'x'),
('x', '=', 'x');

select e.left_operand,e.operator,e.right_operand,
case when e.operator = '>' then if(v.value > v1.value,'True','False')
     when e.operator = '<' then if(v.value < v1.value,'True','False')
     when e.operator = '=' then if(v.value = v1.value,'True','False')
     end as value
from Expressions e
left join Variables v
on v.name = e.left_operand
left join Variables v1
on v1.name = e.right_operand;

CREATE Table if not exists Person(
id int NOT NULL,
name varchar(20),
phone_number varchar(20),
constraint pk PRIMARY KEY(id)
);

CREATE Table if not exists Country(
name varchar(20),
country_code varchar(3),
constraint pk PRIMARY KEY(country_code)
);

CREATE Table if not exists Calls(
caller_id int,
callee_id int,
duration int
);

insert into Person VALUES
(3, 'Jonathan', '051-1234567'),
(12, 'Elvis', '051-7654321'),
(1, 'Moncef', '212-1234567'),
(2, 'Maroua', '212-6523651'),
(7, 'Meir', '972-1234567'),
(9, 'Rachel', '972-0011100');

INSERT into Country VALUES
('Peru', 051),
('Israel', 972),
('Morocco', 212),
('Germany', 049),
('Ethiopia', 251);

INSERT INTO Calls values
(1, 9, 33),
(2, 9, 4),
(1, 2, 59),
(3, 12, 102),
(3, 12, 330),
(12, 3, 5),
(7, 9, 13),
(7, 1, 3),
(9, 7, 1),
(1, 7, 7);

select c.name from Person p
inner join Country c
on left(p.phone_number,3) = c.country_code
inner join Calls cl
on (p.id = cl.callee_id
or p.id = cl.caller_id)
group by c.name
having avg(cl.duration) > (select avg(duration) from Calls);


select name from Employee ORDER BY name;

CREATE Table if not exists user_transactions(
transaction_id int NOT NULL,
product_id int,
spend decimal,
transaction_date datetime,
constraint pk PRIMARY KEY(transaction_id)
);

insert into user_transactions VALUES
(1341, 123424, 1500.60, STR_TO_DATE('12/31/2019','%m/%d/%Y'));
insert into user_transactions VALUES
(1423, 123424, 1000.20, STR_TO_DATE('12/31/2020','%m/%d/%Y')),
(1623, 123424, 1246.44, STR_TO_DATE('12/31/2021','%m/%d/%Y')),
(1322, 123424, 2145.32, STR_TO_DATE('12/31/2022','%m/%d/%Y'));


select *,((spend - previous_year_spend)/previous_year_spend * 100) as yoy
from (
select *,
lag(spend,1,0) 
OVER(PARTITION BY product_id ORDER BY transaction_date) as previous_year_spend
from user_transactions) a;

CREATE Table if not exists inventory(
item_id int NOT NULL,
item_type VARCHAR(20),
item_category VARCHAR(20),
square_footage FLOAT,
constraint pk PRIMARY KEY(item_id)
);

INSERT into inventory VALUES
(1374, 'prime_eligible', 'mini refrigerator', 68.00),
(4245, 'not_prime' ,'standing lamp', 26.40),
(2452, 'prime_eligible', 'television', 85.00),
(3255, 'not_prime', 'side table', 22.60),
(1672, 'prime_eligible', 'laptop', 8.50);


Not solved - 
select 500000 - total_square_foot from (
with cte as (
SELECT item_type,SUM(square_footage) as sum_area,COUNT(*) as item_count
from inventory
GROUP BY item_type)
select round(500000/sum_area) as total_square_foot , 500000/sum_area * item_count as net_count
from cte
GROUP BY item_type) a

CREATE Table if not exists user_actions(
user_id int NOT NULL,
event_id int,
event_type enum("sign-in", "like", "comment"),
event_date datetime
);

insert into user_actions VALUES
(445, 7765, 'sign-in', str_to_date('05/31/2022 12:00:00', '%m/%d/%Y %H:%i:%s')),
(742, 6458, 'sign-in', str_to_date('06/03/2022 12:00:00', '%m/%d/%Y %H:%i:%s')),
(445, 3634, 'like', str_to_date('06/05/2022 12:00:00', '%m/%d/%Y %H:%i:%s')),
(742, 1374, 'comment', str_to_date('06/05/2022 12:00:00', '%m/%d/%Y %H:%i:%s')),
(648, 3124, 'like', str_to_date('06/18/2022 12:00:00', '%m/%d/%Y %H:%i:%s'));

select month(next_date),count(*) from (
select *,
lead(event_date,1,0) OVER(PARTITION BY user_id ORDER BY event_date) as next_date
from user_actions) a
where PERIOD_DIFF(EXTRACT(YEAR_MONTH FROM next_date),EXTRACT(YEAR_MONTH FROM event_date)) = 1
GROUP BY next_date;
